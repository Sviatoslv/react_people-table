{"version":3,"sources":["components/Person.js","components/TableHeader.js","components/PeopleTable.js","components/NewPerson.js","API_DATA.js","App.js","index.js"],"names":["classNames","require","Person","props","people","handlePersonRowClick","personRowSelectedId","personRowSelected","getClassByBornAndDied","person","born-before-1650","born","died-after-1800","died","middleage-father","children","sex","age","getClassByChildSexSelected","peopleArr","person--selected","id","person--female","person--mother","person--male","person--father","personData","map","personIndex","react_default","a","createElement","key","name","className","onClick","father","mother","concat","century","TableHeader","handleSort","PeopleTable","src_components_TableHeader","src_components_Person","NewPerson","state","handleNewPerson","event","target","value","replace","_this","setState","Object","defineProperty","getParrents","parentSex","childBorn","filter","parent","_this$props","this","handleNewPersonSubmit","_this$state","optionsOfFathers","optionsOfMathers","onSubmit","type","placeholder","maxLength","onChange","required","htmlFor","minLength","hidden","React","Component","peoplePromice","fetch","then","response","json","App","peopleFromServer","filterInputValue","sortfieldName","toggleNameSortOrder","errorMessage","addKeysToPersonInArr","objectSpread","getCentury","getChildrenString","Math","ceil","child","join","isArrIncludeSubstr","str","substr","trim","toLowerCase","includes","sortingFunction","arr","sortKey","toggleSortOrder","b","localeCompare","filteredSorteredPeople","item","sort","handleFilterInput","prevState","toConsumableArray","fieldName","personId","preventDefault","newPersonObj","checked","temp","length","components_NewPerson","src_components_PeopleTable","ReactDOM","render","src_App","test","document","getElementById"],"mappings":"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","file":"static/js/main.81983826.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Person.css';\n\nconst classNames = require('classnames');\n\nconst Person = (props) => {\n  const {\n    people, handlePersonRowClick, personRowSelectedId, personRowSelected,\n  } = props;\n\n  const getClassByBornAndDied = person => (\n    classNames({\n      'born-before-1650': person.born < 1650,\n      'died-after-1800': person.died > 1800,\n      'middleage-father': person.children\n                          && person.sex === 'm'\n                          && person.age < 50,\n    })\n  );\n\n  const getClassByChildSexSelected = (person, peopleArr) => (\n    classNames({\n      person: true,\n      'person--selected': person.id === personRowSelectedId\n        && personRowSelected,\n      'person--female': person.sex === 'f',\n      'person--mother': person.children && person.sex === 'f',\n      'person--male': person.sex === 'm',\n      'person--father': person.children && person.sex === 'm',\n\n    })\n  );\n\n  const personData = people.map((person, personIndex, peopleArr) => (\n    <tr\n      key={person.id + person.name}\n      className={getClassByChildSexSelected(person, peopleArr)}\n      onClick={() => handlePersonRowClick(person.id)}\n    >\n      <td>{person.id}</td>\n      <td className={getClassByBornAndDied(person)}>\n        {person.name}\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>{person.father}</td>\n      <td>{person.mother}</td>\n      <td className={person.age > 65 ? 'long-life' : 'so-short-life'}>\n        {person.age}\n      </td>\n      <td className={`person--lived-in-${person.century}`}>{person.century}</td>\n      <td>{person.children}</td>\n    </tr>\n  ));\n\n  return (\n    <tbody>\n      {personData}\n    </tbody>\n  );\n};\n\nPerson.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handlePersonRowClick: PropTypes.func.isRequired,\n  personRowSelected: PropTypes.bool.isRequired,\n  personRowSelectedId: PropTypes.number.isRequired,\n};\n\nexport default Person;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TableHeader.css';\n\nconst TableHeader = props => (\n  <thead>\n    <tr>\n      <th\n        onClick={() => props.handleSort('id')}\n        className=\"sorting--cell\"\n      >\n        id ↓↑\n      </th>\n      <th\n        onClick={() => props.handleSort('name')}\n        className=\"sorting--cell\"\n      >\n        name ↓↑\n      </th>\n      <th\n        onClick={() => props.handleSort('sex')}\n        className=\"sorting--cell\"\n      >\n        sex ↓↑\n      </th>\n      <th\n        onClick={() => props.handleSort('born')}\n        className=\"sorting--cell\"\n      >\n        born ↓↑\n      </th>\n      <th\n        onClick={() => props.handleSort('died')}\n        className=\"sorting--cell\"\n      >\n        died ↓↑\n      </th>\n      <th>father</th>\n      <th>mother</th>\n      <th\n        onClick={() => props.handleSort('age')}\n        className=\"sorting--cell\"\n      >\n        age ↓↑\n      </th>\n      <th\n        onClick={() => props.handleSort('century')}\n        className=\"sorting--cell\"\n      >\n        century ↓↑\n      </th>\n      <th>children</th>\n    </tr>\n  </thead>\n);\n\nTableHeader.propTypes = {\n  handleSort: PropTypes.func.isRequired,\n};\n\nexport default TableHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Person from './Person';\nimport TableHeader from './TableHeader';\nimport './PeopleTable.css';\n\nconst PeopleTable = props => (\n  <table className=\"PeopleTable\">\n    <TableHeader handleSort={props.handleSort} />\n    <Person\n      people={props.people}\n      handlePersonRowClick={props.handlePersonRowClick}\n      personRowSelectedId={props.personRowSelectedId}\n      personRowSelected={props.personRowSelected}\n    />\n  </table>\n);\n\nPeopleTable.propTypes = {\n  handleSort: PropTypes.func.isRequired,\n  handlePersonRowClick: PropTypes.func.isRequired,\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  personRowSelectedId: PropTypes.number.isRequired,\n  personRowSelected: PropTypes.bool.isRequired,\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewPerson extends React.Component {\n  state={\n    name: '',\n    sex: false,\n    born: '',\n    died: '',\n    mother: '',\n    father: '',\n  }\n\n  handleNewPerson = (event) => {\n    const { name } = event.target;\n    let { value } = event.target;\n\n    switch (name) {\n      case 'name':\n      case 'mother':\n      case 'father':\n        value = value.replace(/[^A-Za-z ]/, '');\n        break;\n\n      case 'born':\n        this.setState({\n          father: '',\n          mother: '',\n        });\n\n        value = value.replace(/\\D/g, '');\n        break;\n\n      default:\n        value = value.replace(/\\D/g, '');\n    }\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  getParrents = (parentSex, people, childBorn) => people\n    .filter(parent => (\n      parent.sex === parentSex\n        && parent.born < childBorn\n        && parent.died > childBorn\n    ))\n    .map(parent => (\n      <option\n        key={parent.id + parent.name}\n        value={parent.name}\n      >\n        {parent.name}\n      </option>\n    ))\n\n  render() {\n    const { people, handleNewPersonSubmit } = this.props;\n    const {\n      name, sex, born, died, father, mother,\n    } = this.state;\n    const optionsOfFathers = this.getParrents('m', people, born);\n    const optionsOfMathers = this.getParrents('f', people, born);\n\n    return (\n      <div>\n        <form onSubmit={handleNewPersonSubmit}>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            maxLength=\"60\"\n            value={name}\n            onChange={this.handleNewPerson}\n            required\n          />\n\n          <label htmlFor=\"femaleRadio\">\n            <input\n              name=\"sex\"\n              type=\"radio\"\n              value=\"f\"\n              required\n              onChange={this.handleNewPerson}\n              id=\"femaleRadio\"\n            />\n              Female\n          </label>\n\n          <label htmlFor=\"maleRadio\">\n            <input\n              name=\"sex\"\n              type=\"radio\"\n              value=\"m\"\n              required\n              onChange={this.handleNewPerson}\n              id=\"maleRadio\"\n            />\n            Male\n          </label>\n\n          <input\n            name=\"born\"\n            type=\"text\"\n            placeholder=\"born year\"\n            maxLength=\"4\"\n            minLength=\"4\"\n            required\n            value={born}\n            onChange={this.handleNewPerson}\n          />\n\n          <input\n            name=\"died\"\n            type=\"text\"\n            placeholder=\"died year\"\n            maxLength=\"4\"\n            minLength=\"4\"\n            required\n            value={died}\n            onChange={this.handleNewPerson}\n          />\n\n          <input\n            name=\"father\"\n            type=\"text\"\n            placeholder=\"father\"\n            required\n            value={father}\n            onChange={this.handleNewPerson}\n          />\n\n          <select\n            name=\"father\"\n            value={father}\n            onChange={this.handleNewPerson}\n          >\n            <option hidden>Selet Father</option>\n            {optionsOfFathers}\n          </select>\n\n          <input\n            name=\"mother\"\n            type=\"text\"\n            placeholder=\"mother\"\n            value={mother}\n            required\n            onChange={this.handleNewPerson}\n          />\n\n          <select\n            name=\"mother\"\n            value={mother}\n            onChange={this.handleNewPerson}\n          >\n            <option hidden>Selet Mother</option>\n            {optionsOfMathers}\n          </select>\n\n          <button type=\"submit\">Add New Person</button>\n        </form>\n\n        <p>\n          Name:\n          {name}\n        </p>\n        <p>\n          Sex:\n          {sex}\n        </p>\n        <p>\n          Born:\n          {born}\n        </p>\n        <p>\n          Died:\n          {died}\n        </p>\n        <p>\n          Father:\n          {father}\n        </p>\n        <p>\n          Mother:\n          {mother}\n        </p>\n      </div>\n    );\n  }\n}\n\nNewPerson.propTypes = {\n  handleNewPersonSubmit: PropTypes.func.isRequired,\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default NewPerson;\n","const peoplePromice = () => fetch(\n  'https://mate-academy.github.io/react_people-table/api/people.json'\n)\n  .then(response => response.json());\n\nexport default peoplePromice;\n","import React from 'react';\nimport './PeopleTable.css';\nimport PeopleTable from './components/PeopleTable';\nimport NewPerson from './components/NewPerson';\nimport peoplePromice from './API_DATA';\n\nclass App extends React.Component {\n  state={\n    peopleFromServer: [],\n    people: [],\n    filterInputValue: '',\n    sortfieldName: '',\n    toggleNameSortOrder: 1,\n    personRowSelected: false,\n    personRowSelectedId: 0,\n    errorMessage: '',\n  }\n\n  async componentDidMount() {\n    const peopleFromServer = await peoplePromice();\n\n    const temp = this.addKeysToPersonInArr(peopleFromServer);\n\n    this.setState({\n      peopleFromServer: temp,\n      people: temp,\n    });\n  }\n\n  addKeysToPersonInArr = people => people\n    .map((person, personIndex, peopleArr) => ({\n      ...person,\n      id: personIndex + 1,\n      age: person.died - person.born,\n      century: this.getCentury(person.died),\n      children: this.getChildrenString(person, peopleArr),\n    }))\n\n  getCentury = died => (\n    Math.ceil(died / 100)\n  )\n\n  getChildrenString = (person, peopleArr) => (peopleArr\n    .filter(child => child.father === person.name\n      || child.mother === person.name)\n    .map(child => child.name)\n    .join(', ')\n  )\n\n  isArrIncludeSubstr = (str, substr) => {\n    str = str.join('');\n    substr = substr.trim();\n\n    if (str) {\n      return str.toLowerCase().includes(substr.toLowerCase());\n    }\n    return false;\n  }\n\n  sortingFunction = (arr, sortKey, toggleSortOrder) => {\n    if (!sortKey) {\n      return undefined;\n    }\n\n    switch (typeof arr[0][sortKey]) {\n      case 'string':\n        return (a, b) => toggleSortOrder * a[sortKey].localeCompare(b[sortKey]);\n\n      case 'number':\n        return (a, b) => toggleSortOrder * (a[sortKey] - b[sortKey]);\n\n      default:\n        return undefined;\n    }\n  }\n\n  filteredSorteredPeople =\n    (people, filterInputValue, sortfieldName, toggleNameSortOrder) => (\n      people\n        .filter(item => (this.isArrIncludeSubstr(\n          [item.name, item.mother, item.father], filterInputValue\n        )))\n        .sort(this.sortingFunction(\n          people, sortfieldName, toggleNameSortOrder\n        ))\n    )\n\n  handleFilterInput = (event) => {\n    const { value } = event.target;\n\n    this.setState(prevState => ({\n      people: this.filteredSorteredPeople(\n        [...prevState.peopleFromServer],\n        value,\n        prevState.sortfieldName,\n        -prevState.toggleNameSortOrder,\n      ),\n\n      filterInputValue: value,\n    }));\n  }\n\n  handleSort = (fieldName) => {\n    this.setState(prevState => ({\n      people: this.filteredSorteredPeople(\n        [...prevState.peopleFromServer],\n        prevState.filterInputValue,\n        fieldName,\n        prevState.toggleNameSortOrder,\n      ),\n      toggleNameSortOrder: -prevState.toggleNameSortOrder,\n      sortfieldName: fieldName,\n    }));\n  }\n\n  handlePersonRowClick = (personId) => {\n    this.setState({\n      personRowSelectedId: personId,\n    });\n\n    if (this.state.personRowSelectedId === personId) {\n      this.setState(prevState => ({\n        personRowSelected: !prevState.personRowSelected,\n      }));\n    } else if (this.state.personRowSelectedId !== personId) {\n      this.setState({\n        personRowSelected: true,\n      });\n    }\n  }\n\n  handleNewPersonSubmit = (event) => {\n    event.preventDefault();\n\n    const newPersonObj = {\n      name: event.target[0].value,\n      sex: event.target[1].checked ? 'f' : 'm',\n      born: event.target[3].value,\n      died: event.target[4].value,\n      mother: event.target[5].value,\n      father: event.target[6].value,\n    };\n\n    const age = newPersonObj.died - newPersonObj.born;\n\n    if (age < 0 || age > 150) {\n      this.setState({\n        errorMessage: 'Incorrect Age, or to much or not enough',\n      });\n    } else {\n      this.setState(prevState => ({\n        errorMessage: '',\n        peopleFromServer:\n          this.addKeysToPersonInArr(\n            [...prevState.peopleFromServer, newPersonObj]\n          ),\n        people:\n          this.addKeysToPersonInArr([...prevState.people, newPersonObj]),\n      }));\n    }\n  }\n\n  render() {\n    const {\n      people,\n      errorMessage,\n      filterInputValue,\n      personRowSelectedId,\n      personRowSelected,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>\n          People table\n          {people.length}\n        </h1>\n        <h2 className=\"error-message\">{errorMessage}</h2>\n\n        <NewPerson\n          handleNewPersonSubmit={this.handleNewPersonSubmit}\n          people={people}\n        />\n\n        <input\n          type=\"text\"\n          placeholder=\"Filter by Name, Mother of Father\"\n          value={filterInputValue}\n          onChange={this.handleFilterInput}\n        />\n\n        <PeopleTable\n          people={people}\n          handleSort={this.handleSort}\n          handlePersonRowClick={this.handlePersonRowClick}\n          personRowSelectedId={personRowSelectedId}\n          personRowSelected={personRowSelected}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}